--- a/build/config/compiler/BUILD.gn
+++ b/build/config/compiler/BUILD.gn
@@ -539,10 +539,10 @@ config("compiler") {
   # Linux/Android/Fuchsia common flags setup.
   # ---------------------------------
   if (is_linux || is_chromeos || is_android || is_fuchsia) {
-    asmflags += [ "-fPIC" ]
-    cflags += [ "-fPIC" ]
-    ldflags += [ "-fPIC" ]
-    rustflags += [ "-Crelocation-model=pic" ]
+    asmflags += [ "-fPIC", "-w", ]
+    cflags += [ "-fPIC", "-w", ]
+    ldflags += [ "-fPIC", "-w", ]
+    rustflags += [ "-Crelocation-model=pic", "-Awarnings", ]
 
     if (!is_clang) {
       # Use pipes for communicating between sub-processes. Faster.
@@ -603,13 +603,13 @@ config("compiler") {
     # (https://crbug.com/829795).
     cflags += [ "-fmerge-all-constants" ]
 
-    if (!use_sized_deallocation) {
+    # if (!use_sized_deallocation) {
       if (is_win) {
-        cflags += [ "/Zc:sizedDealloc-" ]
+        cflags += [ "/Zc:sizedDealloc" ]
       } else {
-        cflags += [ "-fno-sized-deallocation" ]
+        cflags += [ "-fsized-deallocation" ]
       }
-    }
+    # }
 
     if (diagnostics_print_source_range_info && !is_win) {
       cflags += [ "-fdiagnostics-print-source-range-info" ]
@@ -662,23 +662,23 @@ config("compiler") {
     # other problems.
     if (default_toolchain != "//build/toolchain/cros:target") {
       cflags += [
-        "-mllvm",
-        "-split-threshold-for-reg-with-hint=0",
+        # "-mllvm",
+        # "-split-threshold-for-reg-with-hint=0",
       ]
       if (use_thin_lto && is_a_target_toolchain) {
         if (is_win) {
-          ldflags += [ "-mllvm:-split-threshold-for-reg-with-hint=0" ]
+          # ldflags += [ "-mllvm:-split-threshold-for-reg-with-hint=0" ]
         } else {
-          ldflags += [ "-Wl,-mllvm,-split-threshold-for-reg-with-hint=0" ]
+          # ldflags += [ "-Wl,-mllvm,-split-threshold-for-reg-with-hint=0" ]
         }
       }
     }
 
     # TODO(crbug.com/40192287): Investigate why/if this should be needed.
     if (is_win) {
-      cflags += [ "/clang:-ffp-contract=off" ]
+      cflags += [ "/clang:-ffp-contract=fast" ]
     } else {
-      cflags += [ "-ffp-contract=off" ]
+      cflags += [ "-ffp-contract=fast" ]
     }
 
     # Enable ELF CREL (see crbug.com/357878242) for all platforms that use ELF.
@@ -805,6 +805,7 @@ config("compiler") {
     cflags += [
       "-flto=thin",
       "-fsplit-lto-unit",
+      "-mllvm", "-indexed-codegen-data-read-function-map-names=false",
     ]
 
     if (thin_lto_enable_cache) {
@@ -842,13 +843,14 @@ config("compiler") {
     # [0]: https://pinpoint-dot-chromeperf.appspot.com/job/16984a18be0000
     # [1]: https://pinpoint-dot-chromeperf.appspot.com/job/11984a18be0000
     # [2]: https://ci.chromium.org/ui/p/chromium/builders/try/android-binary-size/1848442
-    import_instr_limit = 30
+    import_instr_limit = 100
 
     if (is_win) {
       ldflags += [
         "/opt:lldltojobs=all",
         "-mllvm:-import-instr-limit=$import_instr_limit",
         "-mllvm:-disable-auto-upgrade-debug-info",
+        "-mllvm:-indexed-codegen-data-read-function-map-names=false",
       ]
     } else {
       ldflags += [ "-flto=thin" ]
@@ -1116,6 +1118,9 @@ config("compiler") {
 
     # We use clang-rt sanitizer runtimes.
     "-Zexternal-clangrt",
+
+    "-Ctarget-cpu=x86-64-v3",
+    "-Cllvm-args=-fp-contract=fast",
   ]
 
   if (!is_win || force_rustc_color_output) {
@@ -1199,7 +1204,7 @@ config("libcxx_hardening") {
 # building with ThinLTO, no optimization is performed in the link step.
 config("thinlto_optimize_default") {
   if (!is_debug && use_thin_lto && is_a_target_toolchain) {
-    lto_opt_level = 0
+    lto_opt_level = 2
 
     if (is_win) {
       ldflags = [ "/opt:lldlto=" + lto_opt_level ]
@@ -1232,7 +1237,7 @@ config("thinlto_optimize_max") {
     if (thin_lto_enable_optimizations) {
       lto_opt_level = 2
     } else {
-      lto_opt_level = 0
+      lto_opt_level = 2
     }
 
     if (is_win) {
@@ -1279,7 +1284,7 @@ config("compiler_cpu_abi") {
         cflags += [ "-m64" ]
         ldflags += [ "-m64" ]
       }
-      cflags += [ "-msse3" ]
+      cflags += [ "-march=x86-64-v3" ]
     } else if (current_cpu == "x86") {
       if (is_clang && !is_android && !is_chromeos_device) {
         cflags += [ "--target=i386-unknown-linux-gnu" ]
@@ -2810,6 +2815,9 @@ config("optimize_max") {
     # Favor speed over size, /O2 must be before the common flags.
     # /O2 implies /Ot, /Oi, and /GF.
     cflags = [ "/O2" ] + common_optimize_on_cflags
+    if (is_clang) {
+      cflags += [ "/clang:-O3" ]
+    }
   } else if (optimize_for_fuzzing) {
     cflags = [ "-O1" ] + common_optimize_on_cflags
   } else {
--- a/build/config/win/BUILD.gn
+++ b/build/config/win/BUILD.gn
@@ -120,7 +120,7 @@ config("compiler") {
     # microarchitecture. MSVC only supports a subset of architectures, and the
     # next step after SSE2 will be AVX.
     if (current_cpu == "x86" || current_cpu == "x64") {
-      cflags += [ "-msse3" ]
+      cflags += [ "-mtune=haswell", "-msse3", "-mssse3","-msse4.1", "-msse4.2", "-mavx", "-mavx2", "-mfma", "-mf16c", "-mlzcnt", "-mbmi2", "/clang:-w", ]
     }
 
     # Enable ANSI escape codes if something emulating them is around (cmd.exe
@@ -190,7 +190,7 @@ config("compiler") {
     if (use_lld) {
       # String tail merging leads to smaller binaries, but they don't compress
       # as well, leading to increased mini_installer size (crbug.com/838449).
-      ldflags += [ "/OPT:NOLLDTAILMERGE" ]
+      ldflags += [ "/OPT:LLDTAILMERGE" ]
     }
 
     # TODO(siggi): Is this of any use anymore?
--- a/chrome/installer/mini_installer/mini_installer_exe_main.cc
+++ b/chrome/installer/mini_installer/mini_installer_exe_main.cc
@@ -59,7 +59,7 @@ void* memset(void* dest, int c, size_t count) {
   return dest;
 }
 
-#if defined(_DEBUG) && defined(ARCH_CPU_ARM64)
+// #if defined(_DEBUG) && defined(ARCH_CPU_ARM64)
 // The compiler generates calls to memcpy for ARM64 debug builds so we need to
 // supply a memcpy implementation in that configuration.
 // See comments above for why we do this incantation.
@@ -71,5 +71,5 @@ void* memcpy(void* destination, const void* source, size_t count) {
     *dst++ = *src++;
   return destination;
 }
-#endif
+// #endif
 }  // extern "C"
