--- a/build/config/clang/BUILD.gn
+++ b/build/config/clang/BUILD.gn
@@ -248,8 +248,6 @@ clang_lib("compiler_builtins") {
     } else {
       assert(false, "unsupported target_platform=$target_platform")
     }
-  } else if (current_cpu != "ppc64" && current_cpu != "s390x") {
-    libname = "builtins"
   }
 }
 
--- a/build/config/rust.gni
+++ b/build/config/rust.gni
@@ -52,7 +52,7 @@ declare_args() {
   # To use a custom toolchain instead, specify an absolute path to the root of
   # a Rust sysroot, which will have a 'bin' directory and others. Commonly
   # <home dir>/.rustup/toolchains/nightly-<something>-<something>
-  rust_sysroot_absolute = ""
+  rust_sysroot_absolute = "//third_party/rust-toolchain"
 
   # Directory under which to find `bin/bindgen` (a `bin` directory containing
   # the bindgen exectuable).
@@ -62,7 +62,7 @@ declare_args() {
   # set this to the output of `rustc -V`. Changing this string will cause all
   # Rust targets to be rebuilt, which allows you to update your toolchain and
   # not break incremental builds.
-  rustc_version = ""
+  rustc_version = "rustc 1.92.0-nightly (975e6c8fe 2025-09-23)"
 
   # Whether artifacts produced by the Rust compiler can participate in ThinLTO.
   #
--- a/third_party/rust/windows_aarch64_msvc/v0_52/BUILD.gn
+++ b/third_party/rust/windows_aarch64_msvc/v0_52/BUILD.gn
@@ -13,8 +13,8 @@ cargo_crate("lib") {
   epoch = "0.52"
   enabled = is_win && current_cpu == "arm64"
   crate_type = "rlib"
-  crate_root = "//third_party/rust/chromium_crates_io/vendor/windows_aarch64_msvc-v0_52/src/lib.rs"
-  sources = [ "//third_party/rust/chromium_crates_io/vendor/windows_aarch64_msvc-v0_52/src/lib.rs" ]
+  crate_root = "//third_party/rust/chromium_crates_io/vendor/windows-rs-0.52.0/crates/targets/aarch64_msvc/src/lib.rs"
+  sources = [ "//third_party/rust/chromium_crates_io/vendor/windows-rs-0.52.0/crates/targets/aarch64_msvc/src/lib.rs" ]
   inputs = []
 
   build_native_rust_unit_tests = false
@@ -23,13 +23,13 @@ cargo_crate("lib") {
   cargo_pkg_name = "windows_aarch64_msvc"
   cargo_pkg_description = "Import lib for Windows"
   cargo_pkg_repository = "https://github.com/microsoft/windows-rs"
-  cargo_pkg_version = "0.52.6"
+  cargo_pkg_version = "0.52.0"
 
   allow_unsafe = false
 
-  build_root = "//third_party/rust/chromium_crates_io/vendor/windows_aarch64_msvc-v0_52/build.rs"
-  build_sources = [ "//third_party/rust/chromium_crates_io/vendor/windows_aarch64_msvc-v0_52/build.rs" ]
-  native_libs = [ "//third_party/rust/chromium_crates_io/vendor/windows_aarch64_msvc-v0_52/src/../lib/windows.0.52.0.lib" ]
+  build_root = "//third_party/rust/chromium_crates_io/vendor/windows-rs-0.52.0/crates/targets/aarch64_msvc/build.rs"
+  build_sources = [ "//third_party/rust/chromium_crates_io/vendor/windows-rs-0.52.0/crates/targets/aarch64_msvc/build.rs" ]
+  native_libs = [ "//third_party/rust/chromium_crates_io/vendor/windows-rs-0.52.0/crates/targets/aarch64_msvc/lib/windows.0.52.0.lib" ]
 
   # Only for usage from third-party crates. Add the crate to
   # //third_party/rust/chromium_crates_io/Cargo.toml to use
--- a/third_party/rust/windows_i686_msvc/v0_52/BUILD.gn
+++ b/third_party/rust/windows_i686_msvc/v0_52/BUILD.gn
@@ -13,8 +13,8 @@ cargo_crate("lib") {
   epoch = "0.52"
   enabled = is_win && current_cpu == "x86"
   crate_type = "rlib"
-  crate_root = "//third_party/rust/chromium_crates_io/vendor/windows_i686_msvc-v0_52/src/lib.rs"
-  sources = [ "//third_party/rust/chromium_crates_io/vendor/windows_i686_msvc-v0_52/src/lib.rs" ]
+  crate_root = "//third_party/rust/chromium_crates_io/vendor/windows-rs-0.52.0/crates/targets/i686_msvc/src/lib.rs"
+  sources = [ "//third_party/rust/chromium_crates_io/vendor/windows-rs-0.52.0/crates/targets/i686_msvc/src/lib.rs" ]
   inputs = []
 
   build_native_rust_unit_tests = false
@@ -23,13 +23,13 @@ cargo_crate("lib") {
   cargo_pkg_name = "windows_i686_msvc"
   cargo_pkg_description = "Import lib for Windows"
   cargo_pkg_repository = "https://github.com/microsoft/windows-rs"
-  cargo_pkg_version = "0.52.6"
+  cargo_pkg_version = "0.52.0"
 
   allow_unsafe = false
 
-  build_root = "//third_party/rust/chromium_crates_io/vendor/windows_i686_msvc-v0_52/build.rs"
-  build_sources = [ "//third_party/rust/chromium_crates_io/vendor/windows_i686_msvc-v0_52/build.rs" ]
-  native_libs = [ "//third_party/rust/chromium_crates_io/vendor/windows_i686_msvc-v0_52/src/../lib/windows.0.52.0.lib" ]
+  build_root = "//third_party/rust/chromium_crates_io/vendor/windows-rs-0.52.0/crates/targets/i686_msvc/build.rs"
+  build_sources = [ "//third_party/rust/chromium_crates_io/vendor/windows-rs-0.52.0/crates/targets/i686_msvc/build.rs" ]
+  native_libs = [ "//third_party/rust/chromium_crates_io/vendor/windows-rs-0.52.0/crates/targets/i686_msvc/lib/windows.0.52.0.lib" ]
 
   # Only for usage from third-party crates. Add the crate to
   # //third_party/rust/chromium_crates_io/Cargo.toml to use
--- a/third_party/rust/windows_x86_64_msvc/v0_52/BUILD.gn
+++ b/third_party/rust/windows_x86_64_msvc/v0_52/BUILD.gn
@@ -13,8 +13,8 @@ cargo_crate("lib") {
   epoch = "0.52"
   enabled = is_win && current_cpu == "x64"
   crate_type = "rlib"
-  crate_root = "//third_party/rust/chromium_crates_io/vendor/windows_x86_64_msvc-v0_52/src/lib.rs"
-  sources = [ "//third_party/rust/chromium_crates_io/vendor/windows_x86_64_msvc-v0_52/src/lib.rs" ]
+  crate_root = "//third_party/rust/chromium_crates_io/vendor/windows-rs-0.52.0/crates/targets/x86_64_msvc/src/lib.rs"
+  sources = [ "//third_party/rust/chromium_crates_io/vendor/windows-rs-0.52.0/crates/targets/x86_64_msvc/src/lib.rs" ]
   inputs = []
 
   build_native_rust_unit_tests = false
@@ -23,13 +23,13 @@ cargo_crate("lib") {
   cargo_pkg_name = "windows_x86_64_msvc"
   cargo_pkg_description = "Import lib for Windows"
   cargo_pkg_repository = "https://github.com/microsoft/windows-rs"
-  cargo_pkg_version = "0.52.6"
+  cargo_pkg_version = "0.52.0"
 
   allow_unsafe = false
 
-  build_root = "//third_party/rust/chromium_crates_io/vendor/windows_x86_64_msvc-v0_52/build.rs"
-  build_sources = [ "//third_party/rust/chromium_crates_io/vendor/windows_x86_64_msvc-v0_52/build.rs" ]
-  native_libs = [ "//third_party/rust/chromium_crates_io/vendor/windows_x86_64_msvc-v0_52/src/../lib/windows.0.52.0.lib" ]
+  build_root = "//third_party/rust/chromium_crates_io/vendor/windows-rs-0.52.0/crates/targets/x86_64_msvc/build.rs"
+  build_sources = [ "//third_party/rust/chromium_crates_io/vendor/windows-rs-0.52.0/crates/targets/x86_64_msvc/build.rs" ]
+  native_libs = [ "//third_party/rust/chromium_crates_io/vendor/windows-rs-0.52.0/crates/targets/x86_64_msvc/lib/windows.0.52.0.lib" ]
 
   # Only for usage from third-party crates. Add the crate to
   # //third_party/rust/chromium_crates_io/Cargo.toml to use
--- a/tools/rust/build_bindgen.py
+++ b/tools/rust/build_bindgen.py
@@ -29,8 +29,7 @@ from update import (RmTree)
 # The git hash to use.  See https://github.com/rust-lang/rust-bindgen/tags.
 # The current hash below corresponds to something between 0.72.0 and 0.73.0.
 BINDGEN_GIT_VERSION = '2426dd68cd12e0ac022bca18efb9c7d0acd27e12'
-BINDGEN_GIT_REPO = ('https://chromium.googlesource.com/external/' +
-                    'github.com/rust-lang/rust-bindgen')
+BINDGEN_GIT_REPO = ('https://github.com/rust-lang/rust-bindgen')
 
 BINDGEN_SRC_DIR = os.path.join(THIRD_PARTY_DIR, 'rust-toolchain-intermediate',
                                'bindgen-src')
@@ -96,15 +95,8 @@ def RunCargo(cargo_args):
               f'the build_rust.py script builds rustc that is needed here.')
         sys.exit(1)
 
-    clang_bins_dir = os.path.join(RUST_HOST_LLVM_INSTALL_DIR, 'bin')
-    llvm_dir = RUST_HOST_LLVM_INSTALL_DIR
-
-    if not os.path.exists(os.path.join(llvm_dir, 'bin', f'llvm-config{EXE}')):
-        print(f'Missing llvm-config in {llvm_dir}. This '
-              f'script expects to be run after build_rust.py is run as '
-              f'the build_rust.py script produces the LLVM libraries that '
-              f'are needed here.')
-        sys.exit(1)
+    clang_bins_dir = os.path.join(THIRD_PARTY_DIR, 'llvm-build', 'Release+Asserts', 'bin')
+    llvm_dir = os.path.join(THIRD_PARTY_DIR, 'llvm-build', 'Release+Asserts')
 
     env = collections.defaultdict(str, os.environ)
     # Cargo normally stores files in $HOME. Override this.
@@ -114,7 +106,6 @@ def RunCargo(cargo_args):
     env['RUSTC'] = rustc_bin
 
     # Use the LLVM libs and clang compiler from the rustc build.
-    env['LLVM_CONFIG_PATH'] = os.path.join(llvm_dir, 'bin', 'llvm-config')
     if sys.platform == 'win32':
         env['LIBCLANG_PATH'] = os.path.join(llvm_dir, 'bin')
     else:
@@ -205,7 +196,7 @@ def main():
     install_dir = os.path.join(RUST_TOOLCHAIN_OUT_DIR)
     print(f'Installing bindgen to {install_dir} ...')
 
-    llvm_dir = RUST_HOST_LLVM_INSTALL_DIR
+    llvm_dir = os.path.join(THIRD_PARTY_DIR, 'llvm-build', 'Release+Asserts')
     shutil.copy(
         os.path.join(build_dir, RustTargetTriple(), 'release',
                      f'bindgen{EXE}'), os.path.join(install_dir, 'bin'))
