# Extra dependencies not included in the main Chromium source archive, and
# additional build utilities to replace Google-provided ones.
# Do note that utilities in here can be swapped with user-provided versions.

# Uses a heavily modified syzygy code base to build swapimport.exe
# Disabled import reordering for now since this is too much work to maintain
#[third_party/syzygy]
#version = bd0e67f571063e18e7200c72e6152a3a7e4c2a6d
#url = https://github.com/Eloston/syzygy/archive/{version}.tar.gz
#download_filename = syzygy-{version}.tar.gz
#strip_leading_dirs = syzygy-{version}

# Use a pre-built LLVM toolchain from LLVM for convenience
# Developer notes:
# * Releases of LLVM are available as "Clang for Windows (64-bit)" on LLVM's download page.
# * If the current stable version of LLVM is causing problems with the build, try
#   matching Google's LLVM version (defined by the `CLANG_REVISION` variable in
#   tools/clang/scripts/update.py by downloading a snapshot build at the version specified
#   by `CLANG_REVISION` and `VERSION` constants in `tools/clang/scripts/update.py`.
#   For example, revision 123456 of LLVM 9.8.7 64-bit Windows would be:
#   `http://prereleases.llvm.org/win-snapshots/LLVM-9.8.7-r123456-win64.exe`
#   (link derived from [LLVM Snapshot Builds](http://llvm.org/builds/))
[llvm]
version = 20.1.5
#Uncomment when pre-release version is used.
#url = https://prereleases.llvm.org/win-snapshots/LLVM-%(version)s-win64.exe
#Uncomment the below instead when a new enough stable version of LLVM comes around
url = https://github.com/llvm/llvm-project/releases/download/llvmorg-%(version)s/LLVM-%(version)s-win64.exe
download_filename = LLVM-%(version)s-win64.exe
sha512 = 2a8c86f5e17251303eb3e876f52711618abac59a4bd041e15f62893b73b30dab76af7d91018481ea1b472aa17f46891ed9c3b402be88d35a79ca0897eeddbd02
extractor = 7z
output_path = third_party/llvm-build/Release+Asserts

# Pre-built GNU gperf from GnuWin32
[gperf]
version = 3.0.1
url = https://sourceforge.net/projects/gnuwin32/files/gperf/%(version)s/gperf-%(version)s-bin.zip/download
download_filename = gperf-%(version)s-bin.zip
sha512 = 3f2d3418304390ecd729b85f65240a9e4d204b218345f82ea466ca3d7467789f43d0d2129fcffc18eaad3513f49963e79775b10cc223979540fa2e502fe7d4d9
md5 = f67a2271f68894eeaa1984221d5ef5e5
extractor = 7z
output_path = third_party/gperf

# Pre-built GNU bison from GnuWin32
[bison-bin]
version = 2.4.1
url = https://sourceforge.net/projects/gnuwin32/files/bison/%(version)s/bison-%(version)s-bin.zip/download
download_filename = bison-%(version)s-bin.zip
md5 = 9d3ccf30fc00ba5e18176c33f45aee0e
sha512 = ea8556c2be1497db96c84d627a63f9a9021423041d81210776836776f1783a91f47ac42d15c46510718d44f14653a2e066834fe3f3dbf901c3cdc98288d0b845
extractor = 7z
output_path = third_party/bison
[bison-dep]
version = 2.4.1
url = https://sourceforge.net/projects/gnuwin32/files/bison/%(version)s/bison-%(version)s-dep.zip/download
download_filename = bison-%(version)s-dep.zip
md5 = 6558e5f418483b7c859643686008f475
sha512 = f1ca0737cce547c3e6f9b59202a31b12bbc5a5626b63032b05d7abd9d0f55da68b33ff6015c65ca6c15eecd35c6b1461d19a24a880abcbb4448e09f2fabe2209
extractor = 7z
output_path = third_party/bison
[bison-lib]
version = 2.4.1
url = https://sourceforge.net/projects/gnuwin32/files/bison/%(version)s/bison-%(version)s-lib.zip/download
download_filename = bison-%(version)s-lib.zip
md5 = c75406456f8d6584746769b1b4b828d6
sha512 = 7400aa529c6ec412a67de1e96ae5cf43f59694fca69106eec9c6d28d04af30f20b5d4d73bdb5b53052ab848c9fb2925db684be1cf45cbbb910292bf6d1dda091
extractor = 7z
output_path = third_party/bison

# Pre-built Ninja (build system)
[ninja]
version = 1.12.1
url = https://github.com/ninja-build/ninja/releases/download/v%(version)s/ninja-win.zip
download_filename = ninja-win-%(version)s.zip
sha512 = d6715c6458d798bcb809f410c0364dabd937b5b7a3ddb4cd5aba42f9fca45139b2a8a3e7fd9fbd88fd75d298ed99123220b33c7bdc8966a9d5f2a1c9c230955f
extractor = 7z
output_path = third_party/ninja

# Pre-built git
[git]
version = 2.49.0
url =  https://github.com/git-for-windows/git/releases/download/v%(version)s.windows.1/PortableGit-%(version)s-64-bit.7z.exe
download_filename = PortableGit-%(version)s-64-bit.7z.exe
sha512 = 7a91e563bf87ef09ee62c03b005ccadcc6565d36ac09f2397f773c1740a01dc6d3595d3a0afeeff2f86cb334267a6fd2ebf7b15666c623fae39aec477716e8a8
extractor = 7z
output_path = third_party/git

# Pre-built Node.JS (LTS)
[nodejs]
version = 22.11.0
url = https://nodejs.org/dist/v%(version)s/node-v%(version)s-win-x64.zip
download_filename = node-v%(version)s-win-x64.zip
sha512 = f483767b01f5fb9c6ad3ed06ef107f45f0699934c3ffcf89b56dcd1fa56292ae4301963e604659d58af3f1f598d5639b0c64199a2f8904e233d5a0e4171e59d0
extractor = 7z
output_path = third_party/node/win
strip_leading_dirs=node-v%(version)s-win-x64

# esbuild
[esbuild]
version = 0.25.1
url = https://registry.npmjs.org/@esbuild/win32-x64/-/win32-x64-%(version)s.tgz
download_filename = esbuild-win32-x64-%(version)s.tgz
sha512 = 63511075c7f031279037fba347955ac8b389d411da2beb2cca4d001333e30beb759484e0b2771c3ea1636fa57e2ec4e9ffd228bf8cac7e3c4b68627d44fb6456
output_path = third_party/devtools-frontend/src/third_party/esbuild
strip_leading_dirs=package

# DirectX-Headers
[directx-headers]
version = d9020edfc69b789653e04fa2d8d10ee3317ffa56
url = https://github.com/microsoft/DirectX-Headers/archive/%(version)s.zip
download_filename = directx-headers-%(version)s.zip
extractor = 7z
output_path = third_party/microsoft_dxheaders/src
strip_leading_dirs=DirectX-Headers-%(version)s

# Rust
[rust-x64]
version = 2025-04-21
url = https://static.rust-lang.org/dist/%(version)s/rust-nightly-x86_64-pc-windows-msvc.tar.gz
download_filename = rust-nightly-%(version)s-x86_64-pc-windows-msvc.tar.gz
sha512 = c48d2a459ec87cf12b92b2434f2397c01961dd554f3d01aef1ef773ea69630ceede33fe17b60de580064f746fae9eac5d6637b9f561a0856fb2b11dfbe3edbf6
output_path = third_party/rust-toolchain-x64
strip_leading_dirs=rust-nightly-x86_64-pc-windows-msvc
[rust-x86]
version = 2025-04-21
url = https://static.rust-lang.org/dist/%(version)s/rust-nightly-i686-pc-windows-msvc.tar.gz
download_filename = rust-nightly-%(version)s-i686-pc-windows-msvc.tar.gz
sha512 = 26693974db960f755306ca528a1fc276bf4f12e57c31d0127061810e0825dd6615d53d3df067661ad6a2778628e6ed6414976287febbd58cdc8cd4e4a09abe33
output_path = third_party/rust-toolchain-x86
strip_leading_dirs=rust-nightly-i686-pc-windows-msvc
[rust-arm]
version = 2025-04-21
url = https://static.rust-lang.org/dist/%(version)s/rust-nightly-aarch64-pc-windows-msvc.tar.gz
download_filename = rust-nightly-%(version)s-aarch64-pc-windows-msvc.tar.gz
sha512 = 2129e13f57b787370febdda68898259f3023a44853c663a306482f6e8560999b1765f5994f721165d93ecaf1756cff3d47dc73148d6690c31a275389d59d7702
output_path = third_party/rust-toolchain-arm
strip_leading_dirs=rust-nightly-aarch64-pc-windows-msvc
[rust-windows-create]
version = 0.52.0
url = https://github.com/microsoft/windows-rs/archive/refs/tags/%(version)s.zip
download_filename = rust-windows-create-%(version)s.zip
sha512 = b505d45dfa201b0b2bf18aecea549fe72b60fbc7a2cb83d9319363e550585072cf87ce543ecf9e39d951dda2e60fcf3755bd75ead7096efdfa700f5faf781339
extractor = 7z
output_path = third_party/rust/chromium_crates_io/vendor